<?php $_config = $this->mHelper('config'); ?>
var EWLayeredNav = Class.create({
	lastHash: '',
	initialize: function (options) {
        Object.extend(this, options || {});
        
		<?php if ($_config->isAjaxEnabled() === true): ?>
        if ("onhashchange" in window && (document.documentMode === undefined || document.documentMode > 7 )) {
        	Event.observe(window, 'hashchange', this.hashChangedEvent.bind(this));
		} else {
		    setInterval(this.hashChangedEvent.bind(this), 100);
		}
		<?php endif; ?>
    },
	
    rewritePage: function () {
        $$("#narrow-by-list .attr-box a[class~='attr-opt']").each(function(e) {
        	e.stopObserving().observe('click', ewlayerednav.toggleFilter.bind(this));
        	e.writeAttribute('href', 'javascript:void(0);');
        }.bind(this));
        
        $$("#narrow-by-list .category-attr a[id*='cat-']").each(function(e) {
        	e.stopObserving().observe('click', ewlayerednav.setCategory.bind(this, $(e).readAttribute('href')));
        	e.writeAttribute('href', 'javascript:void(0);');
        }.bind(this));
        
        $$("#narrow-by-list dt a[class~='attr-clear']").each(function(e) {
        	e.stopObserving().observe('click', ewlayerednav.clearFilter.bind(this));
        	e.writeAttribute('href', 'javascript:void(0);');
        }.bind(this));
        
        $$("#narrow-by-list dt[class~='attr-header']").each(function(e) {
        	e.stopObserving().observe('click', ewlayerednav.toggleAttribute.bind(this));
        }.bind(this));
        
        $$(".ewlayerednav-layered-nav a[class~='attr-clear-all']").each(function(e) {
        	e.stopObserving().observe('click', ewlayerednav.clear.bind(this));
        	e.writeAttribute('href', 'javascript:void(0);');
        }.bind(this));
        
        <?php if ($_config->getPriceFilterType() == 'input'): ?>
        if ($('attr-price-submit')) {
	        $('attr-price-submit').observe('click', function() {
	        	this.processParam('add', 'price', $('attr-price-from').value + ',' + $('attr-price-to').value, 1);
			}.bind(this));
		}
		
		$$('#attr-price-from', '#attr-price-to').each(function(e) {
			Event.observe(e, 'keypress', function(ev) {
				if (ev.type == 'keypress' && ev.keyCode != 13) return;
				this.processParam('add', 'price', $('attr-price-from').value + ',' + $('attr-price-to').value, 1);
			}.bind(this));
		}.bind(this));
		<?php endif; ?>
		
		$$("div[class~='sort-by'] select", "td[class~='sort-by'] select").each(function(e) {
			this.registerToolbarCb('sortby', e);
		}.bind(this));
		
		$$("div[class~='sort-by'] a", "td[class~='sort-by'] a").each(function(e) {
			this.registerToolbarCb('dir', e);
		}.bind(this));
		
		$$("div[class~='limiter'] select", "td[class~='limiter'] select").each(function(e) {
			this.registerToolbarCb('limiter', e);
		}.bind(this));
		
		$$("*[class~='view-mode'] a").each(function(e) {
			this.registerToolbarCb('mode', e);
		}.bind(this));
		
		$$("*[class~='pages'] a").each(function(e) {
			this.registerToolbarCb('pages', e);
		}.bind(this));
		
		$$("#ewlayerednav-product-list a[class~='toolbar-opt']").each(function(e) {
        	e.stopObserving().observe('click', ewlayerednav.setFilter.bind(this));
        	e.writeAttribute('href', 'javascript:void(0);');
        }.bind(this));
        
        $$("#narrow-by-list .attr-box li[class~='attr-opt-toggler']").each(function(e) {
        	e.stopObserving().observe('click', function(ev) {
        		var p = ev.findElement('ol.std-attr-box');
        		p.select('li.attr-opt-other').invoke('toggle');
        		p.select('li.attr-opt-toggler a').invoke('update', p.select('li.attr-opt-other')[0].visible() ? <?php echo json_encode($this->__('Show Less')); ?> : <?php echo json_encode($this->__('Show More')); ?>);
        	}.bind(this));
        }.bind(this));
        
        $$("#attr-toggler dd a").each(function(e) {
        	e.stopObserving().observe('click', function(ev) {
        		var e = ev.findElement('a');
        		$$("#narrow-by-list dt.attr-other", "#narrow-by-list dd.attr-other").invoke('toggle');
        		e.update($$("#narrow-by-list dt.attr-other")[0].visible() ? <?php echo json_encode($this->__('Show Less Attributes')); ?> : <?php echo json_encode($this->__('Show More Attributes')); ?>);
        	}.bind(this));
        }.bind(this));
    },
    
    registerToolbarCb: function(type, e) {
    	e.writeAttribute('onchange', '');
    	var eventType = (e.nodeName == 'A' ? 'click' : 'change');
		e.stopObserving().observe(eventType, function(ev) {
			var p = ev.findElement('select');
			if (p) e = p.select('option')[p.selectedIndex];
			else e = ev.findElement('a')
			var url = e.value ? e.value : e.href;
			var param = e.identify();
			if (param.indexOf('-') < 0 && url.indexOf('?') >= 0) {
				var query = url.substring(url.indexOf('?')+1).parseQuery();
				if (type == 'sortby' || type == 'dir') param = 'order-' + query.order + '-dir-' + query.dir;
				else if (type == 'limiter') param = 'limit-' + query.limit;
				else if (type == 'mode') param = 'mode-' + query.mode;
				else if (type == 'pages') param = 'p-' + query.p;
			}
			if (e) this.processFilters('add', param, 1);
			ev.stop();
			return false;
		}.bind(this));
   	},
   	
    <?php if ($_config->getPriceFilterType() == 'slider'): ?>
	initSlider: function(width, from, to, minPrice, maxPrice)
	{
	    var priceSlider = $('price-slider');
	    priceSlider.down('div.handle').setStyle({'left': from+'px'});
	    priceSlider.down('div.handle').next('div.handle').setStyle({'left': to+'px'});
	    this.priceWidget = new Control.Slider(priceSlider.select('.handle'), priceSlider, {
	    	nav: this,
			range: $R(0, width),
			sliderValue: [from, to],
			restricted: true,
		
			onChange: function (values){
				var f = this.round((maxPrice-minPrice)*values[0]/width + minPrice),
					t = this.round((maxPrice-minPrice)*values[1]/width + minPrice);
				
				$('range-from').update(f); 
				$('range-to').update(t);
				this.nav.processParam('add', 'price', f + ',' + t, 1);
			},
			onSlide: function(values) { 
				$('range-from').update(this.round((maxPrice-minPrice)*values[0]/width + minPrice));
				$('range-to').update(this.round((maxPrice-minPrice)*values[1]/width + minPrice));
			},
			round: function(num){
			    num = parseFloat(num);
			    if (isNaN(num)) num = 0;
			    return Math.round(num*100)/100;
			}
		});
	},
	<?php endif; ?>
	
    toggleAttribute: function(ev) {
    	var e = ev.findElement('dt');
    	e.toggleClassName('attr-header-selected');
    	e.nextSiblings()[0].toggle();
    },
    
    setCategory: function(url, ev) {
    	<?php if ($_config->isAjaxEnabled() === false): ?>
	    	<?php if ($_config->isCategoryResetFiltersEnabled() === true): ?>
	    		var append = '';
	    		if (url.indexOf('?') >= 0) {
	    			var p = url.substr(url.indexOf('?')+1).toQueryParams();
		    		url = url.substr(0, url.indexOf('?'));
		    		append = 'cat=' + p.cat;
		    	}
		    	var q = $('ewlayerednav-search-params');
		    	if (q && q.value) url += '?' + q.value + '&' + append;
		    	else url += '?' + append;
	    	<?php endif; ?>
    		window.location = url;
    	<?php else: ?>
    		this.setFilter(ev, <?php echo (int) $_config->isCategoryResetFiltersEnabled(); ?>, 1);
    	<?php endif; ?>
    },

    hashChangedEvent: function() {
    	<?php if ($_config->isAjaxEnabled() === true): ?>
    	if (location.hash === this.lastHash) return;
    	this.lastHash = location.hash;
    	url = $('ewlayerednav-url').value;
    	if (url.indexOf('?') < 0) url += '?';
    	this.ajax(url + (location.href.split("#")[1] || ""));
    	<?php endif; ?>
   	},
   	
    toggleFilter: function(ev, c) {
    	var e = ev.findElement('a');
    	this.processFilters('toggle', e.identify(), 0, c);
    },
    
    setFilter: function(ev, c) {
    	var e = ev.findElement('a');
    	this.processFilters('add', e.identify(), 1, c);
    },
    
    processFilters: function(a, s, m, c) {
    	var v = s.split('-');
    	if ((v.size() % 2) == 0) {
    		for (i = 0; i < v.size(); i += 2) {
    			this.processParam(a, v[i], v[i+1], m, c, ((i+2) != v.size()));
    		}
    	} else if ((v.size() % 2) == 1) {
	        for (i = 0; i < v.size(); i += v.size()) {
	            this.processParam(a, v[i], v[i+1]+'-'+v[i+2], m, c, ((i+v.size()) != v.size()));
	        }
	    }
   	},
   	
    clearFilter: function(ev) {
    	var e = ev.findElement('a');
    	var v = e.identify().split('-');
    	if (v.size() >= 1) {
    		this.processParam('clear', v[0]);
    	}
    	ev.stop();
    },

    clear: function(ev) {
    	this.processParam('clear');
    },
    
    processParam: function(a, k, v, m, c, r) {
    	var e = $('ewlayerednav-params');
		var params = e.value.parseQuery();
		if (c) params = {};
		
		if (a == 'toggle' || a == 'add') {
			var s = params[k] || '';
			var values = s.split('-');
			if (-1 == values.indexOf(v) || a == 'add'){
				if (m) values = [v];
				else values.push(v);
			}  else {
				values = values.without(v);
			}
			if (values.size()) params[k] = values.without('').join('-');
			else delete params[k];
		} else if (a == 'clear') {
			if (typeof k != 'undefined') delete params[k];
			else {
				var q = params['q'];
				params = {};
				if (typeof q != 'undefined') params['q'] = q;
			}
		}
	   	
		e.value = Object.toQueryString(params).gsub('%2B', '+');
		if (!r) {
		    <?php if ($_config->isAjaxEnabled() === true): ?>
			location.hash = e.value;
			<?php else: ?>
			var url = $('ewlayerednav-url').value;
    		if (url.indexOf('?') < 0) url += '?';
    		this.ajax(url + e.value);
			<?php endif; ?>
		}
		return false;
    },
    
    fade: function(e) {
    	if (e) {
	        e.fade({ duration:0.4, from:1, to:0.2 }); 
	        e.style.backgroundImage = 'url(<?php echo $this->getSkinUrl('extendware/ewcore/images/shared/spinner50x50.gif'); ?>)';
	        e.style.backgroundRepeat = 'no-repeat';
	        e.style.backgroundPosition = 'center center';
		}
    },
    
    ajax: function(url) {
    	<?php if ($_config->isAjaxEnabled() === false): ?>
    	url = this.rewriteUrl(url);
    	if (url.indexOf('?') > 0) {
			var curl = location.href;
			if (curl.indexOf('#') >= 0) {
				curl = curl.substr(0, curl.indexOf('#'));
			}
			if (curl.indexOf('?') > 0) {
				curl = curl.substr(0, curl.indexOf('?'));
			}
			curl += url.substr(url.indexOf('?'));
			window.location = curl;
		}
		<?php else: ?>
    	this.fade($('ewlayerednav-product-list'));
    	this.fade($$('div.ewlayerednav-layered-nav').first());
    	new Ajax.Request(url, {
            method: 'get',
            parameters: {ewlayerednav_current_url: window.location.href},
            onSuccess: function (transport) {
            	var response = new String(transport.responseText);
            	response.extractScripts().map(function(script) {
					try {
						(window.execScript) ? window.execScript(script) : window.setTimeout(script, 0);
					} catch (e) {}
				}.bind(window));
            }.bind(this)
        });
		<?php endif; ?>
    },

	rewriteUrl:function(url){
		url = url.replace('http://', window.location.protocol+'//');
        return url.replace('https://', window.location.protocol+'//');
	}
});

var EWLayeredNavTrigger = function(){
	ewlayerednav = new EWLayeredNav();
	ewlayerednav.hashChangedEvent();
	ewlayerednav.rewritePage();
	document.fire('ewlayerednav:loaded');
};

Event.observe(document, 'dom:loaded', EWLayeredNavTrigger);